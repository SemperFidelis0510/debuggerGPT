openapi: 3.0.1
info:
  title: Debug Plugin
  description: A versatile plugin that empowers ChatGPT to access, modify, and analyze files on your computer, execute shell commands, and manage Python environments for debugging and development purposes. This plugin is designed to be proactive, independent, and persistent, always striving to provide the most effective and creative solutions.
  version: 'v1'
servers:
  - url: http://localhost:5003


paths:
  /initialize:
    post:
      operationId: initialize_plugin
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/initializePluginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initializePluginResponse'
        '400':
          description: Error during initialization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initializePluginErrorResponse'

  /execute:
    post:
      operationId: execute_command
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeCommandRequest'
      responses:
        '200':
          description: Command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executeCommandResponse'
        '400':
          description: Error occurred while executing command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executeCommandErrorResponse'

  /files/{filename}:
    get:
      operationId: get_file
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFileResponse'
        '404':
          description: File not found
    post:
      summary: Edit a file
      operationId: edit_file
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editFileRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    put:
      operationId: download_file
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/downloadFileRequest'
      responses:
        '200':
          description: File downloaded successfully

  /memory/{key}:
    get:
      operationId: recall
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
        - name: all
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Memory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recallResponse'
        '400':
          description: Key not found
    post:
      operationId: remember
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string

  /analysis/code:
    get:
      operationId: analyze_code
      parameters:
        - name: code_path
          in: query
          required: true
          schema:
            type: string
        - name: scope_level
          in: query
          required: false
          schema:
            type: integer
            default: 2
            description: The level of scope for the code analysis. 1 for basic information, 2 for additional information about classes and comments, 3 for pylint output, cyclomatic complexity, and Halstead metrics.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analyzeCodeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /analysis/folder:
    get:
      operationId: analyze_folder
      parameters:
        - name: folder_path
          in: query
          required: true
          schema:
            type: string
            description: The path to the folder to analyze.
        - name: depth
          in: query
          required: false
          schema:
            type: integer
            description: The depth of the folder structure to analyze.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analyzeFolderResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string


components:
  schemas:
    # Initialization schemas
    initializePluginRequest:
      type: object
      properties: { }
    initializePluginResponse:
      type: object
      properties:
        message:
          type: string
          description: The status of the initialization.
        guidelines:
          type: string
          description: Detailed guidelines on how to use the plugin.
    initializePluginErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: The error message.

    # Execution schemas
    executeCommandRequest:
      type: object
      required:
        - command
      properties:
        command:
          type: string
          description: The command to execute.
        env_name:
          type: string
          description: The name of the environment (optional).
    executeCommandResponse:
      type: object
      properties:
        output:
          type: array
          items:
            type: string
          description: The output of the command.
    executeCommandErrorResponse:
      type: object
      properties:
        error:
          type: array
          items:
            type: string
          description: The error message.
        output:
          type: array
          items:
            type: string
          description: The output of the command before it failed.

    # File operation schemas
    getFileResponse:
      type: object
      properties:
        content:
          type: object
          additionalProperties:
            type: string
          description: The content of the file, with line numbers as keys and lines as values.
    editFileRequest:
      type: object
      required:
        - fixes
      properties:
        erase:
          type: boolean
          default: false
          description: Whether to erase the content of the current file.
        fixes:
          type: array
          items:
            type: object
            required:
              - start_line
              - new_code
            properties:
              start_line:
                type: integer
                description: The line at which to start writing the new code in the old code.
              end_line:
                type: integer
                description: The line at which to stop replacing the old code. If not provided, only the line at 'start_line' will be replaced.
              new_code:
                type: string
                description: The new code to write.
              replace:
                type: boolean
                default: false
                description: Whether to replace the old code. If true, each line of the new code replaces a line in the old code. If false, the new code is inserted at the given line, pushing the lines after the first line of insertion down.
              indentation:
                type: string
                description: The indentation to apply to the new code.
    downloadFileRequest:
      type: object
      required:
        - url
        - local_path
      properties:
        url:
          type: string
          description: The URL of the file to download.
        local_path:
          type: string
          description: The local path where the file will be saved.

    # Memory operation schemas
    rememberRequest:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          description: The key to remember.
        value:
          type: string
          description: The value to remember.
    recallResponse:
      type: object
      properties:
        value:
          type: string
          description: The value of the key.

    # Analysis schemas
    analyzeCodeRequest:
      type: object
      required:
        - code_path
      properties:
        code_path:
          type: string
          description: The path to the code to analyze.
    analyzeCodeResponse:
      type: object
      properties:
        analysis:
          type: object
          description: The analysis of the code.
        instructions:
          type: string
          description: The instructions for the analysis.
    analyzeFolderRequest:
      type: object
      properties:
        folder_path:
          type: string
          description: The path to the folder to analyze.
        depth:
          type: integer
          description: The depth of the folder structure to analyze.
    analyzeFolderResponse:
      type: object
      properties:
        analysis:
          type: object
          description: The analysis of the folder.
        instructions:
          type: string
          description: The instructions for the analysis.


